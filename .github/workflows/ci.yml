name: Monorepo CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  CI_REGISTRY_IMAGE: ${{ vars.CI_REGISTRY_IMAGE != '' && vars.CI_REGISTRY_IMAGE || format('ghcr.io/{0}', github.repository) }}

jobs:
  lint:
    name: "Lint :: ${{ matrix.name }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: gateway
            path: backend/gateway
            runtime: node
            lint-command: pnpm lint
            enabled: true
          - name: auth
            path: backend/auth
            runtime: gradle
            lint-command: ./gradlew lint
            enabled: false
          - name: crm
            path: backend/crm
            runtime: poetry
            lint-command: poetry run ruff check .
            enabled: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Skip (service scaffold only)
        if: ${{ !matrix.enabled }}
        run: echo "${{ matrix.name }} pipeline is disabled until implementation is available."

      - name: Setup PNPM
        if: ${{ matrix.enabled && matrix.runtime == 'node' }}
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        if: ${{ matrix.enabled && matrix.runtime == 'node' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: ${{ matrix.path }}/pnpm-lock.yaml

      - name: Install dependencies
        if: ${{ matrix.enabled && matrix.runtime == 'node' }}
        working-directory: ${{ matrix.path }}
        run: pnpm install --frozen-lockfile

      - name: Run lint
        if: ${{ matrix.enabled }}
        working-directory: ${{ matrix.path }}
        run: ${{ matrix.lint-command }}

  unit-tests:
    name: "Unit tests :: ${{ matrix.name }}"
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: gateway
            path: backend/gateway
            runtime: node
            test-command: pnpm test -- --runInBand
            enabled: true
          - name: auth
            path: backend/auth
            runtime: gradle
            test-command: ./gradlew test
            enabled: false
          - name: crm
            path: backend/crm
            runtime: poetry
            test-command: poetry run pytest
            enabled: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Skip (service scaffold only)
        if: ${{ !matrix.enabled }}
        run: echo "${{ matrix.name }} pipeline is disabled until implementation is available."

      - name: Setup PNPM
        if: ${{ matrix.enabled && matrix.runtime == 'node' }}
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        if: ${{ matrix.enabled && matrix.runtime == 'node' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: ${{ matrix.path }}/pnpm-lock.yaml

      - name: Install dependencies
        if: ${{ matrix.enabled && matrix.runtime == 'node' }}
        working-directory: ${{ matrix.path }}
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        if: ${{ matrix.enabled }}
        working-directory: ${{ matrix.path }}
        run: ${{ matrix.test-command }}

  contract-tests:
    name: "Contract tests :: ${{ matrix.name }}"
    runs-on: ubuntu-latest
    needs: unit-tests
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: gateway
            path: backend/gateway
            runtime: node
            contract-command: pnpm run test:contract --if-present
            enabled: true
          - name: auth
            path: backend/auth
            runtime: gradle
            contract-command: ./gradlew pactVerify
            enabled: false
          - name: crm
            path: backend/crm
            runtime: poetry
            contract-command: poetry run pytest -m contract
            enabled: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Skip (service scaffold only)
        if: ${{ !matrix.enabled }}
        run: echo "${{ matrix.name }} contract suite is disabled until implementation is available."

      - name: Setup PNPM
        if: ${{ matrix.enabled && matrix.runtime == 'node' }}
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        if: ${{ matrix.enabled && matrix.runtime == 'node' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: ${{ matrix.path }}/pnpm-lock.yaml

      - name: Install dependencies
        if: ${{ matrix.enabled && matrix.runtime == 'node' }}
        working-directory: ${{ matrix.path }}
        run: pnpm install --frozen-lockfile

      - name: Run contract tests (optional)
        if: ${{ matrix.enabled }}
        working-directory: ${{ matrix.path }}
        run: ${{ matrix.contract-command }}

  build-and-push:
    name: "Build & push :: ${{ matrix.name }}"
    runs-on: ubuntu-latest
    needs: contract-tests
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: gateway
            path: backend/gateway
            dockerfile: backend/gateway/docker/Dockerfile.gateway
            image-suffix: gateway
            enabled: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        if: ${{ matrix.enabled }}
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: ${{ matrix.enabled }}
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: ${{ matrix.enabled }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        if: ${{ matrix.enabled }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.CI_REGISTRY_IMAGE }}-${{ matrix.image-suffix }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push image
        if: ${{ matrix.enabled }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.image-suffix }}
          cache-to: type=gha,mode=max,scope=${{ matrix.image-suffix }}

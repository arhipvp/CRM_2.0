================================================================================
                     QUICK REFERENCE - FILE LOCATIONS
================================================================================

DOCUMENTATION FILES (Read These First!)
========================================
  - /c/Dev/CRM_2.0/CONTINUATION_NOTES.md
    Main guide for next developer (4000+ words)
    Topics: Setup, Architecture, API Integration, Testing, Deployment
    
  - /c/Dev/CRM_2.0/COMPLETION_SUMMARY.md  
    What was completed and how (1500+ words)
    Details on all changes made
    
  - /c/Dev/CRM_2.0/FINAL_SUMMARY.txt
    High-level project summary
    This file you're reading

MODIFIED SOURCE FILES
====================

Enhanced Main Navigation:
  frontend/src/components/common/MainNavigation.tsx
  - 176 lines (was 62)
  - Added: Icons, mobile menu, responsive design
  - Icons: Home, Deals, Clients, Tasks, Payments, Policies, Notifications, Admin
  - Mobile: Hamburger menu with dropdown
  
Enhanced User Menu:
  frontend/src/components/common/UserMenu.tsx
  - 164 lines (was 55)
  - Added: Avatar with initials, dropdown menu, profile section
  - Mobile: Fallback simple logout button
  
Updated Tests:
  frontend/src/components/common/__tests__/MainNavigation.test.tsx
  - 70 lines (rewritten)
  - Added: Auth store mocking, new test cases

KEY LOCATIONS IN CODE
====================

App Layout Structure:
  frontend/src/app/AppLayoutShell.tsx
    -> Uses MainNavigation + UserMenu
  
  frontend/src/app/(app)/layout.tsx
    -> Wraps all main app pages
    
  frontend/src/app/(app)/page.tsx
    -> Dashboard (home page)

Authentication State:
  frontend/src/stores/authStore.ts
    -> Zustand store for auth
    -> Used by: MainNavigation, UserMenu
    
  frontend/src/components/providers/AuthBootstrap.tsx
    -> Initializes auth on app start

API Integration Points:
  frontend/src/lib/api/client.ts
    -> Main HTTP client (Axios)
    -> Handles tokens, errors, retries
    
  frontend/src/lib/api/queries.ts
    -> React Query hooks for API calls
    -> Caching strategies
    
  frontend/src/lib/config.ts
    -> Environment variable config
    -> API base URL, auth mode

Real-Time Updates:
  frontend/src/lib/sse/createEventStream.ts
    -> Server-Sent Events client
    
  frontend/src/components/providers/SSEBridge.tsx
    -> Connects SSE streams
    -> Syncs with React Query cache

IMPORTANT ENVIRONMENT VARIABLES
===============================

Development (.env.local):
  NEXT_PUBLIC_API_BASE_URL=http://localhost:8080/api/v1
  NEXT_PUBLIC_AUTH_DISABLED=true
  NEXT_PUBLIC_CRM_SSE_URL=http://localhost:8080/api/v1/streams/deals
  NEXT_PUBLIC_NOTIFICATIONS_SSE_URL=http://localhost:8080/api/v1/streams/notifications

Production (Kubernetes ConfigMap):
  NEXT_PUBLIC_API_BASE_URL=https://api.example.com/api/v1
  NEXT_PUBLIC_AUTH_DISABLED=false
  NEXT_PUBLIC_CRM_SSE_URL=https://api.example.com/api/v1/streams/deals
  NEXT_PUBLIC_NOTIFICATIONS_SSE_URL=https://api.example.com/api/v1/streams/notifications

QUICK COMMANDS
==============

Frontend Development:
  cd frontend
  pnpm install            # Install dependencies
  pnpm dev                # Start dev server (http://localhost:3000)
  pnpm test               # Run tests
  pnpm test:watch         # Watch mode
  pnpm lint               # ESLint check
  
Backend Services:
  ./scripts/bootstrap-local.sh        # Start all services
  ./scripts/bootstrap-local.sh --skip-backend  # Infrastructure only
  ./scripts/start-backend.sh --service gateway,crm-api  # Specific services
  ./scripts/migrate-local.sh          # Run database migrations
  ./scripts/check-local-infra.sh      # Check health

Database:
  psql $DATABASE_URL                  # Connect to PostgreSQL
  docker logs -f infra-postgres-1     # Watch PostgreSQL logs

TESTING GUIDELINES
==================

Unit Tests:
  Location: src/**/__tests__/*.test.tsx
  Framework: Vitest + React Testing Library
  Run: pnpm test
  
E2E Tests:
  Location: tests/e2e/*.spec.ts
  Framework: Playwright
  Run: pnpm test:e2e

Before Deployment:
  pnpm test          # Unit tests pass
  pnpm test:e2e      # E2E tests pass
  pnpm lint          # No linting errors
  pnpm build         # Build succeeds
  
COMPONENT STRUCTURE
===================

Navigation Component (MainNavigation):
  - 8 menu items with icons
  - Active route highlighting
  - Mobile hamburger menu
  - Responsive design
  - Dark mode support
  - Accessibility: ARIA labels, keyboard nav
  
  Usage:
    <MainNavigation />        # Default (desktop nav + icons)
    <MainNavigation showIcons={false} />  # Text only
    <MainNavigation showLabels={false} />  # Icons only

User Menu Component (UserMenu):
  - Avatar with initials
  - Dropdown menu
  - User info display
  - Profile/Settings links
  - Logout button
  - Mobile fallback button
  
  Usage:
    <UserMenu />  # Shows dropdown or fallback
    
  Integration:
    Checks useAuthStore for user
    Calls logout() on logout click
    Redirects to /login after logout

NEXT STEPS
==========

For Next Developer:

Week 1: Setup & Understanding
  [ ] Read CONTINUATION_NOTES.md (1-2 hours)
  [ ] Read CLAUDE.md (20 minutes)
  [ ] Read architecture docs (30 minutes)
  [ ] Run bootstrap script (30 minutes)
  [ ] Verify frontend loads (5 minutes)
  [ ] Run tests (5 minutes)
  
Week 2-3: Real API Integration (Phase 1)
  [ ] Disable mock auth (NEXT_PUBLIC_AUTH_DISABLED=false)
  [ ] Test login with real credentials
  [ ] Connect to Gateway API
  [ ] Test CRUD operations (deals, clients)
  [ ] Set up SSE streams
  [ ] Update tests to use real API
  
Week 4-6: Complete Core Features (Phase 2)
  [ ] Payment module UI
  [ ] Task management
  [ ] Document upload
  [ ] Notification center
  [ ] Audit logs
  
Week 7-8: Admin & Reports (Phase 3)
  [ ] User management
  [ ] Dictionary editor
  [ ] Dashboard analytics
  [ ] Materialized views
  [ ] Audit log viewer
  
Week 9-10: Polish & Deploy (Phase 4)
  [ ] Performance optimization
  [ ] Accessibility audit
  [ ] Cross-browser testing
  [ ] Production deployment
  [ ] Ops documentation

GETTING HELP
============

If stuck, check:
1. CONTINUATION_NOTES.md (troubleshooting section)
2. CLAUDE.md (project-specific guidance)
3. Backend service README files
4. Docker Compose logs
5. Browser DevTools (Console tab)

Common Issues & Solutions:
  "Failed to fetch" API
    -> Check Gateway running: curl http://localhost:8080/health
    -> Check API URL in env
    -> Check CORS headers
    
  "Hydration mismatch"
    -> Use suppressHydrationWarning on date elements
    -> Wrap with 'use client' directive
    
  "Auth not working"
    -> Check NEXT_PUBLIC_AUTH_DISABLED setting
    -> Verify cookies in DevTools
    -> Check API endpoint responding
    
  "Styles not applying"
    -> Check Tailwind content paths in tailwind.config.js
    -> Clear .next folder
    -> Rebuild with pnpm build

PROJECT STATUS
==============

Current Features (Complete):
  [✓] Authentication (mock mode)
  [✓] Main navigation with icons
  [✓] User profile dropdown
  [✓] Deal management (CRUD + kanban)
  [✓] Client management (CRUD + workspace)
  [✓] Responsive design
  [✓] Dark mode
  [✓] Unit tests
  [✓] E2E tests

Next Features (To Do):
  [ ] Real authentication
  [ ] Payment module
  [ ] Task management
  [ ] Notification center
  [ ] Document management
  [ ] Admin panel
  [ ] Reports & analytics
  [ ] Telegram bot

================================================================================
                    GOOD LUCK! START WITH READING THE DOCS!
================================================================================

services:
  postgres:
    image: postgres:15-alpine
    container_name: crm-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-crm}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      TZ: ${TIMEZONE:-Europe/Moscow}
      PGTZ: ${TIMEZONE:-Europe/Moscow}
      AUTH_DB_USER: ${AUTH_DB_USER:-auth}
      AUTH_DB_PASSWORD: ${AUTH_DB_PASSWORD:-auth}
      CRM_DB_USER: ${CRM_DB_USER:-crm}
      CRM_DB_PASSWORD: ${CRM_DB_PASSWORD:-crm}
      DOCUMENTS_DB_USER: ${DOCUMENTS_DB_USER:-documents}
      DOCUMENTS_DB_PASSWORD: ${DOCUMENTS_DB_PASSWORD:-documents}
      TASKS_DB_USER: ${TASKS_DB_USER:-tasks}
      TASKS_DB_PASSWORD: ${TASKS_DB_PASSWORD:-tasks}
      NOTIFICATIONS_DB_USER: ${NOTIFICATIONS_DB_USER:-notifications}
      NOTIFICATIONS_DB_PASSWORD: ${NOTIFICATIONS_DB_PASSWORD:-notifications}
      AUDIT_DB_USER: ${AUDIT_DB_USER:-audit}
      AUDIT_DB_PASSWORD: ${AUDIT_DB_PASSWORD:-audit}
      BACKUP_DB_USER: ${BACKUP_DB_USER:-backup}
      BACKUP_DB_PASSWORD: ${BACKUP_DB_PASSWORD:-backup}
      REPORTS_DB_USER: ${REPORTS_DB_USER:-reports}
      REPORTS_DB_PASSWORD: ${REPORTS_DB_PASSWORD:-reports}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sh:/docker-entrypoint-initdb.d/10-init.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-crm}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - infra

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: crm-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-crm}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-crm}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST:-crm}
    command: ["sh", "-c", "chown -R rabbitmq:rabbitmq /var/lib/rabbitmq && rabbitmq-server"]
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    tmpfs:
      - /var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - infra

  redis:
    image: redis:7-alpine
    container_name: crm-redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - infra

  consul:
    image: hashicorp/consul:1.16
    container_name: crm-consul
    restart: unless-stopped
    command:
      - agent
      - -server
      - -bootstrap-expect=1
      - -ui
      - -client=0.0.0.0
      - -bind=0.0.0.0
      - -data-dir=/consul/data
    ports:
      - "${CONSUL_HTTP_PORT:-8500}:8500"
      - "${CONSUL_DNS_PORT:-8600}:8600/udp"
      - "${CONSUL_GRPC_PORT:-8502}:8502"
    volumes:
      - consul_data:/consul/data
    healthcheck:
      test: ["CMD", "consul", "info"]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - infra

  backup:
    build:
      context: ../backend/backup
      dockerfile: Dockerfile
    container_name: crm-backup
    restart: unless-stopped
    environment:
      BACKUP_DATABASE_URL: ${BACKUP_INTERNAL_DATABASE_URL:-${BACKUP_DATABASE_URL:-postgresql://${BACKUP_DB_USER:-backup}:${BACKUP_DB_PASSWORD:-backup}@${POSTGRES_HOST_INTERNAL:-postgres}:5432/${POSTGRES_DB:-crm}?search_path=backup}}
      BACKUP_SERVICE_PORT: ${BACKUP_SERVICE_PORT:-8094}
      BACKUP_TIMEZONE: ${TIMEZONE:-Europe/Moscow}
      BACKUP_POSTGRES_BACKUP_DSN: ${BACKUP_INTERNAL_POSTGRES_BACKUP_DSN:-${BACKUP_POSTGRES_BACKUP_DSN:-postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST_INTERNAL:-postgres}:5432/${POSTGRES_DB:-crm}}}
      BACKUP_S3_ENDPOINT_URL: ${BACKUP_S3_ENDPOINT_URL:-}
      BACKUP_S3_REGION_NAME: ${BACKUP_S3_REGION_NAME:-us-east-1}
      BACKUP_S3_BUCKET: ${BACKUP_S3_BUCKET}
      BACKUP_S3_ACCESS_KEY: ${BACKUP_S3_ACCESS_KEY}
      BACKUP_S3_SECRET_KEY: ${BACKUP_S3_SECRET_KEY}
      BACKUP_RABBITMQ_URL: ${BACKUP_RABBITMQ_INTERNAL_URL:-amqp://${RABBITMQ_DEFAULT_USER:-crm}:${RABBITMQ_DEFAULT_PASS:-crm}@${RABBITMQ_HOST_INTERNAL:-rabbitmq}:5672/${RABBITMQ_DEFAULT_VHOST:-crm}}
      BACKUP_NOTIFICATION_EXCHANGE: ${BACKUP_NOTIFICATION_EXCHANGE:-backup.notifications}
      BACKUP_NOTIFICATION_ROUTING_KEY: ${BACKUP_NOTIFICATION_ROUTING_KEY:-jobs}
      BACKUP_RABBITMQ_MANAGEMENT_URL: ${BACKUP_RABBITMQ_INTERNAL_MANAGEMENT_URL:-http://${RABBITMQ_HOST_INTERNAL:-rabbitmq}:15672}
      BACKUP_RABBITMQ_ADMIN_USER: ${BACKUP_RABBITMQ_ADMIN_USER}
      BACKUP_RABBITMQ_ADMIN_PASSWORD: ${BACKUP_RABBITMQ_ADMIN_PASSWORD}
      BACKUP_RABBITMQ_VHOST: ${BACKUP_RABBITMQ_VHOST:-crm}
      BACKUP_CONSUL_HTTP_ADDR: ${BACKUP_INTERNAL_CONSUL_HTTP_ADDR:-${BACKUP_CONSUL_HTTP_ADDR:-http://${CONSUL_HOST_INTERNAL:-consul}:8500}}
      BACKUP_CONSUL_TOKEN: ${BACKUP_CONSUL_TOKEN:-}
      BACKUP_REDIS_HOST: ${BACKUP_INTERNAL_REDIS_HOST:-${BACKUP_REDIS_HOST:-redis}}
      BACKUP_REDIS_PORT: ${BACKUP_REDIS_PORT:-6379}
      BACKUP_REDIS_PASSWORD: ${BACKUP_REDIS_PASSWORD:-}
      BACKUP_REDIS_DATA_DIR: ${BACKUP_REDIS_DATA_DIR:-/data}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "${BACKUP_SERVICE_PORT:-8094}:8094"
    networks:
      - infra

  pgadmin:
    image: dpage/pgadmin4:8
    container_name: crm-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@crm.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - infra

  gateway:
    build:
      context: ..
      dockerfile: backend/gateway/docker/Dockerfile.gateway
    container_name: crm-gateway
    restart: unless-stopped
    environment:
      NODE_ENV: production
      GATEWAY_SERVICE_HOST: ${GATEWAY_SERVICE_HOST:-0.0.0.0}
      GATEWAY_SERVICE_PORT: ${GATEWAY_SERVICE_PORT:-8080}
      GATEWAY_BASE_URL: http://gateway:${GATEWAY_SERVICE_PORT:-8080}/api
      REDIS_URL: ${REDIS_URL_INTERNAL:-redis://redis:6379/0}
      REDIS_CACHE_URL: ${REDIS_CACHE_URL_INTERNAL:-redis://redis:6379/1}
      REDIS_BULLMQ_URL: ${REDIS_BULLMQ_URL_INTERNAL:-redis://redis:6379/3}
      REDIS_RATE_LIMIT_URL: ${REDIS_RATE_LIMIT_URL_INTERNAL:-redis://redis:6379/4}
      REDIS_CACHE_TTL: ${REDIS_CACHE_TTL:-300}
      REDIS_KEY_PREFIX: ${REDIS_KEY_PREFIX:-gateway}
      REDIS_HEARTBEAT_PREFIX: ${REDIS_HEARTBEAT_PREFIX:-gateway:sse}
      CONSUL_HTTP_ADDR: ${CONSUL_HTTP_ADDR_INTERNAL:-http://consul:8500}
      CONSUL_GRPC_ADDR: ${CONSUL_GRPC_ADDR_INTERNAL:-consul:8502}
      CONSUL_DNS_ADDR: ${CONSUL_DNS_ADDR_INTERNAL:-consul:8600}
      CONSUL_ENABLED: ${CONSUL_ENABLED:-true}
      CONSUL_HTTP_TIMEOUT: ${CONSUL_HTTP_TIMEOUT:-5000}
      GATEWAY_UPSTREAM_TIMEOUT: ${GATEWAY_UPSTREAM_TIMEOUT:-5000}
      GATEWAY_UPSTREAM_SSE_RECONNECT_DELAY: ${GATEWAY_UPSTREAM_SSE_RECONNECT_DELAY:-3000}
      GATEWAY_UPSTREAM_SSE_HEARTBEAT_INTERVAL: ${GATEWAY_UPSTREAM_SSE_HEARTBEAT_INTERVAL:-15000}
      GATEWAY_UPSTREAM_SSE_HEARTBEAT_TTL: ${GATEWAY_UPSTREAM_SSE_HEARTBEAT_TTL:-60}
      GATEWAY_UPSTREAM_CRM_BASE_URL: http://crm:${CRM_SERVICE_PORT:-8082}/api
      GATEWAY_UPSTREAM_CRM_SSE_URL: http://crm:${CRM_SERVICE_PORT:-8082}/streams
      GATEWAY_UPSTREAM_CRM_SERVICE_NAME: ${GATEWAY_UPSTREAM_CRM_SERVICE_NAME:-crm-service}
      GATEWAY_UPSTREAM_AUTH_BASE_URL: http://auth:${AUTH_SERVICE_PORT:-8081}/api
      GATEWAY_UPSTREAM_AUTH_SERVICE_NAME: ${GATEWAY_UPSTREAM_AUTH_SERVICE_NAME:-auth-service}
      GATEWAY_UPSTREAM_NOTIFICATIONS_BASE_URL: http://notifications:${NOTIFICATIONS_SERVICE_PORT:-8085}/api
      GATEWAY_UPSTREAM_NOTIFICATIONS_SERVICE_NAME: ${GATEWAY_UPSTREAM_NOTIFICATIONS_SERVICE_NAME:-notifications-service}
      GATEWAY_UPSTREAM_NOTIFICATIONS_SSE_URL: http://notifications:${NOTIFICATIONS_SERVICE_PORT:-8085}/api/notifications/stream
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-change_me_access_secret}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-change_me_refresh_secret}
      JWT_ISSUER: ${JWT_ISSUER:-crm.local}
      JWT_AUDIENCE: ${JWT_AUDIENCE:-crm.clients}
      SESSION_SECRET: ${SESSION_SECRET:-change_me_session_secret}
    ports:
      - "${GATEWAY_SERVICE_PORT:-8080}:8080"
    depends_on:
      redis:
        condition: service_healthy
      consul:
        condition: service_healthy
      crm:
        condition: service_healthy
      auth:
        condition: service_healthy
      notifications:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/api/v1/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - infra
    profiles: ["backend"]

  auth:
    build:
      context: ..
      dockerfile: infra/docker/spring-boot-service.Dockerfile
      args:
        SERVICE_PATH: backend/auth
    container_name: crm-auth
    restart: unless-stopped
    environment:
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT:-8081}
      AUTH_DATABASE_URL: ${AUTH_DATABASE_URL_INTERNAL:-r2dbc:postgresql://${AUTH_DB_USER:-auth}:${AUTH_DB_PASSWORD:-auth}@${POSTGRES_HOST_INTERNAL:-postgres}:${POSTGRES_CONTAINER_PORT:-5432}/${POSTGRES_DB:-crm}?schema=auth}
      AUTH_REDIS_URL: ${AUTH_REDIS_URL_INTERNAL:-redis://redis:6379/5}
      AUTH_JWT_SECRET: ${AUTH_JWT_SECRET:-change_me}
      AUTH_JWT_ISSUER: http://auth:${AUTH_SERVICE_PORT:-8081}
      AUTH_JWT_AUDIENCE: ${AUTH_JWT_AUDIENCE:-crm-clients}
      AUTH_ACCESS_TOKEN_TTL: ${AUTH_ACCESS_TOKEN_TTL:-PT15M}
      AUTH_REFRESH_TOKEN_TTL: ${AUTH_REFRESH_TOKEN_TTL:-P7D}
      AUTH_BASE_URL: http://auth:${AUTH_SERVICE_PORT:-8081}
    ports:
      - "${AUTH_SERVICE_PORT:-8081}:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pgrep java >/dev/null || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
    networks:
      - infra
    profiles: ["backend"]

  crm:
    build:
      context: ..
      dockerfile: infra/docker/python-poetry-service.Dockerfile
      args:
        SERVICE_PATH: backend/crm
    container_name: crm-crm
    restart: unless-stopped
    environment:
      CRM_SERVICE_HOST: ${CRM_SERVICE_HOST:-0.0.0.0}
      CRM_SERVICE_PORT: ${CRM_SERVICE_PORT:-8082}
      CRM_DATABASE_URL: ${CRM_DATABASE_URL_INTERNAL:-postgresql+asyncpg://${CRM_DB_USER:-crm}:${CRM_DB_PASSWORD:-crm}@${POSTGRES_HOST_INTERNAL:-postgres}:${POSTGRES_CONTAINER_PORT:-5432}/${POSTGRES_DB:-crm}?search_path=crm}
      CRM_REDIS_URL: ${CRM_REDIS_URL_INTERNAL:-redis://redis:6379/2}
      CRM_PERMISSIONS_REDIS_URL: ${CRM_PERMISSIONS_REDIS_URL_INTERNAL:-redis://redis:6379/3}
      CRM_RABBITMQ_URL: ${CRM_RABBITMQ_INTERNAL_URL:-amqp://${RABBITMQ_DEFAULT_USER:-crm}:${RABBITMQ_DEFAULT_PASS:-crm}@${RABBITMQ_HOST_INTERNAL:-rabbitmq}:5672/${RABBITMQ_DEFAULT_VHOST:-crm}}
      CRM_EVENTS_EXCHANGE: ${CRM_EVENTS_EXCHANGE:-crm.events}
      CRM_CELERY_BROKER_URL: ${CRM_CELERY_BROKER_URL_INTERNAL:-redis://redis:6379/2}
      CRM_CELERY_RESULT_BACKEND: ${CRM_CELERY_RESULT_BACKEND_INTERNAL:-redis://redis:6379/2}
      CRM_CELERY_RETRY_DELAY_SECONDS: ${CRM_CELERY_RETRY_DELAY_SECONDS:-60}
      CRM_DOCUMENTS_BASE_URL: http://documents:${DOCUMENTS_SERVICE_PORT:-8084}/api/v1
      CRM_PERMISSIONS_QUEUE_NAME: ${CRM_PERMISSIONS_QUEUE_NAME:-permissions:sync}
      CRM_PERMISSIONS_QUEUE_PREFIX: ${CRM_PERMISSIONS_QUEUE_PREFIX:-bull}
      CRM_PERMISSIONS_JOB_NAME: ${CRM_PERMISSIONS_JOB_NAME:-permissions.sync}
      CRM_DEFAULT_TENANT_ID: ${CRM_DEFAULT_TENANT_ID:-}
    ports:
      - "${CRM_SERVICE_PORT:-8082}:8082"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "python -c \"import urllib.request,sys; sys.exit(0) if urllib.request.urlopen('http://127.0.0.1:8082/healthz').status == 200 else sys.exit(1)\"",
        ]
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - infra
    profiles: ["backend"]

  documents:
    build:
      context: ..
      dockerfile: infra/docker/node-service.Dockerfile
      args:
        SERVICE_PATH: backend/documents
        BUILD_COMMAND: pnpm run build
        START_COMMAND: node dist/src/main.js
    container_name: crm-documents
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DOCUMENTS_SERVICE_PORT: ${DOCUMENTS_SERVICE_PORT:-8084}
      DOCUMENTS_DATABASE_URL: ${DOCUMENTS_DATABASE_URL_INTERNAL:-postgresql://${DOCUMENTS_DB_USER:-documents}:${DOCUMENTS_DB_PASSWORD:-documents}@${POSTGRES_HOST_INTERNAL:-postgres}:${POSTGRES_CONTAINER_PORT:-5432}/${POSTGRES_DB:-crm}?search_path=documents}
      DOCUMENTS_DATABASE_SCHEMA: ${DOCUMENTS_DATABASE_SCHEMA:-documents}
      DOCUMENTS_RUN_MIGRATIONS: "true"
      DOCUMENTS_REDIS_URL: ${DOCUMENTS_REDIS_URL_INTERNAL:-redis://redis:6379/3}
      DOCUMENTS_REDIS_PREFIX: ${DOCUMENTS_REDIS_PREFIX:-documents}
      DOCUMENTS_QUEUE_NAME: ${DOCUMENTS_QUEUE_NAME:-documents:tasks}
      DOCUMENTS_PERMISSIONS_SYNC_QUEUE_NAME: ${DOCUMENTS_PERMISSIONS_SYNC_QUEUE_NAME:-documents.permissions.sync}
      DOCUMENTS_PERMISSIONS_SYNC_JOB_TTL: ${DOCUMENTS_PERMISSIONS_SYNC_JOB_TTL:-300}
      DOCUMENTS_STORAGE_DRIVER: ${DOCUMENTS_STORAGE_DRIVER:-local}
      DOCUMENTS_STORAGE_ROOT: /var/lib/crm/documents
      DOCUMENTS_STORAGE_DEFAULT_MODE: ${DOCUMENTS_STORAGE_DEFAULT_MODE:-0770}
      DOCUMENTS_STORAGE_ACL_ENABLED: ${DOCUMENTS_STORAGE_ACL_ENABLED:-true}
      DOCUMENTS_STORAGE_QUOTA_MB: ${DOCUMENTS_STORAGE_QUOTA_MB:-}
      DOCUMENTS_STORAGE_PUBLIC_BASE_URL: ${DOCUMENTS_STORAGE_PUBLIC_BASE_URL:-}
      DOCUMENTS_UPLOAD_URL_BASE: ${DOCUMENTS_UPLOAD_URL_BASE:-http://localhost:9000/documents/upload}
      DOCUMENTS_UPLOAD_URL_TTL: ${DOCUMENTS_UPLOAD_URL_TTL:-900}
      DOCUMENTS_FOLDERS_TEMPLATE_DEFAULT: ${DOCUMENTS_FOLDERS_TEMPLATE_DEFAULT:-{title}}
      DOCUMENTS_FOLDERS_TEMPLATE_CLIENT: ${DOCUMENTS_FOLDERS_TEMPLATE_CLIENT:-Client {ownerId}}
      DOCUMENTS_FOLDERS_TEMPLATE_DEAL: ${DOCUMENTS_FOLDERS_TEMPLATE_DEAL:-Deal {ownerId}}
      DOCUMENTS_FOLDERS_TEMPLATE_POLICY: ${DOCUMENTS_FOLDERS_TEMPLATE_POLICY:-Policy {ownerId}}
      DOCUMENTS_FOLDERS_TEMPLATE_PAYMENT: ${DOCUMENTS_FOLDERS_TEMPLATE_PAYMENT:-Payment {ownerId}}
      DOCUMENTS_FOLDERS_WEB_BASE_URL: ${DOCUMENTS_FOLDERS_WEB_BASE_URL:-https://files.local/documents/}
    volumes:
      - documents_data:/var/lib/crm/documents
    ports:
      - "${DOCUMENTS_SERVICE_PORT:-8084}:8084"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8084/health || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
    networks:
      - infra
    profiles: ["backend"]

  notifications:
    build:
      context: ..
      dockerfile: infra/docker/node-service.Dockerfile
      args:
        SERVICE_PATH: backend/notifications
        BUILD_COMMAND: pnpm run build
        START_COMMAND: node dist/main.js
    container_name: crm-notifications
    restart: unless-stopped
    environment:
      NODE_ENV: production
      START_COMMAND: node dist/src/main.js
      NOTIFICATIONS_HTTP_HOST: ${NOTIFICATIONS_HTTP_HOST:-0.0.0.0}
      NOTIFICATIONS_HTTP_PORT: ${NOTIFICATIONS_SERVICE_PORT:-8085}
      NOTIFICATIONS_BASE_URL: http://notifications:${NOTIFICATIONS_SERVICE_PORT:-8085}/api
      NOTIFICATIONS_DB_HOST: ${POSTGRES_HOST_INTERNAL:-postgres}
      NOTIFICATIONS_DB_PORT: ${POSTGRES_CONTAINER_PORT:-5432}
      NOTIFICATIONS_DB_NAME: ${POSTGRES_DB:-crm}
      NOTIFICATIONS_REDIS_HOST: ${REDIS_HOST_INTERNAL:-redis}
      NOTIFICATIONS_REDIS_PORT: ${REDIS_PORT:-6379}
      NOTIFICATIONS_REDIS_DB: ${NOTIFICATIONS_REDIS_DB:-4}
      NOTIFICATIONS_REDIS_USERNAME: ${NOTIFICATIONS_REDIS_USERNAME:-}
      NOTIFICATIONS_REDIS_PASSWORD: ${NOTIFICATIONS_REDIS_PASSWORD:-}
      NOTIFICATIONS_DATABASE_URL: ${NOTIFICATIONS_DATABASE_URL_INTERNAL:-postgresql://${NOTIFICATIONS_DB_USER:-notifications}:${NOTIFICATIONS_DB_PASSWORD:-notifications}@${POSTGRES_HOST_INTERNAL:-postgres}:${POSTGRES_CONTAINER_PORT:-5432}/${POSTGRES_DB:-crm}?search_path=notifications}
      NOTIFICATIONS_RABBITMQ_URL: ${NOTIFICATIONS_RABBITMQ_INTERNAL_URL:-amqp://notifications:notifications@${RABBITMQ_HOST_INTERNAL:-rabbitmq}:5672/notifications}
      NOTIFICATIONS_RABBITMQ_URI: ${NOTIFICATIONS_RABBITMQ_INTERNAL_URI:-amqp://notifications:notifications@${RABBITMQ_HOST_INTERNAL:-rabbitmq}:5672/notifications}
      NOTIFICATIONS_RABBITMQ_EXCHANGE: ${NOTIFICATIONS_RABBITMQ_EXCHANGE:-notifications.exchange}
      NOTIFICATIONS_RABBITMQ_QUEUE: ${NOTIFICATIONS_RABBITMQ_QUEUE:-notifications.events}
      NOTIFICATIONS_RABBITMQ_ROUTING_KEY: ${NOTIFICATIONS_RABBITMQ_ROUTING_KEY:-notifications.*}
      NOTIFICATIONS_RABBITMQ_QUEUE_DURABLE: ${NOTIFICATIONS_RABBITMQ_QUEUE_DURABLE:-true}
      NOTIFICATIONS_DISPATCH_EXCHANGE: ${NOTIFICATIONS_DISPATCH_EXCHANGE:-notifications.exchange}
      NOTIFICATIONS_DISPATCH_ROUTING_KEY: ${NOTIFICATIONS_DISPATCH_ROUTING_KEY:-notifications.dispatch}
      NOTIFICATIONS_DISPATCH_REDIS_CHANNEL: ${NOTIFICATIONS_DISPATCH_REDIS_CHANNEL:-notifications:dispatch}
      NOTIFICATIONS_DISPATCH_RETRY_ATTEMPTS: ${NOTIFICATIONS_DISPATCH_RETRY_ATTEMPTS:-3}
      NOTIFICATIONS_DISPATCH_RETRY_DELAY_MS: ${NOTIFICATIONS_DISPATCH_RETRY_DELAY_MS:-60000}
      NOTIFICATIONS_REDIS_URL: ${NOTIFICATIONS_REDIS_URL_INTERNAL:-redis://redis:6379/4}
      NOTIFICATIONS_REDIS_PREFIX: ${NOTIFICATIONS_REDIS_PREFIX:-notifications:}
      NOTIFICATIONS_TEMPLATES_DEFAULT_LOCALE: ${NOTIFICATIONS_TEMPLATES_DEFAULT_LOCALE:-ru-RU}
      NOTIFICATIONS_SSE_RETRY_MS: ${NOTIFICATIONS_SSE_RETRY_MS:-5000}
      NOTIFICATIONS_TELEGRAM_ENABLED: ${NOTIFICATIONS_TELEGRAM_ENABLED:-false}
      NOTIFICATIONS_TELEGRAM_MOCK: ${NOTIFICATIONS_TELEGRAM_MOCK:-true}
      NOTIFICATIONS_TELEGRAM_BOT_TOKEN: ${NOTIFICATIONS_TELEGRAM_BOT_TOKEN:-}
      NOTIFICATIONS_TELEGRAM_CHAT_ID: ${NOTIFICATIONS_TELEGRAM_CHAT_ID:-}
      NOTIFICATIONS_TELEGRAM_WEBHOOK_ENABLED: ${NOTIFICATIONS_TELEGRAM_WEBHOOK_ENABLED:-false}
      NOTIFICATIONS_TELEGRAM_WEBHOOK_SECRET: ${NOTIFICATIONS_TELEGRAM_WEBHOOK_SECRET:-}
      NOTIFICATIONS_TELEGRAM_WEBHOOK_SIGNATURE_HEADER: ${NOTIFICATIONS_TELEGRAM_WEBHOOK_SIGNATURE_HEADER:-x-telegram-signature}
    ports:
      - "${NOTIFICATIONS_SERVICE_PORT:-8085}:8085"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8085/api/notifications/health || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
    networks:
      - infra
    profiles: ["backend"]

  tasks:
    build:
      context: ..
      dockerfile: infra/docker/node-service.Dockerfile
      args:
        SERVICE_PATH: backend/tasks
        BUILD_COMMAND: pnpm run build
        START_COMMAND: node dist/main.js
    container_name: crm-tasks
    restart: unless-stopped
    environment:
      NODE_ENV: production
      START_COMMAND: node dist/main.js
      TASKS_SERVICE_HOST: ${TASKS_SERVICE_HOST:-0.0.0.0}
      TASKS_SERVICE_PORT: ${TASKS_SERVICE_PORT:-8086}
      TASKS_BASE_URL: http://tasks:${TASKS_SERVICE_PORT:-8086}
      TASKS_DATABASE_URL: ${TASKS_DATABASE_URL_INTERNAL:-postgresql://${TASKS_DB_USER:-tasks}:${TASKS_DB_PASSWORD:-tasks}@${POSTGRES_HOST_INTERNAL:-postgres}:${POSTGRES_CONTAINER_PORT:-5432}/${POSTGRES_DB:-crm}?search_path=tasks}
      TASKS_RABBITMQ_URL: ${TASKS_RABBITMQ_INTERNAL_URL:-amqp://tasks:tasks@${RABBITMQ_HOST_INTERNAL:-rabbitmq}:5672/tasks}
      TASKS_EVENTS_EXCHANGE: ${TASKS_EVENTS_EXCHANGE:-tasks.events}
      TASKS_EVENTS_SOURCE: ${TASKS_EVENTS_SOURCE:-tasks.service}
      TASKS_EVENTS_TASK_CREATED_KEY: ${TASKS_EVENTS_TASK_CREATED_KEY:-task.created}
      TASKS_EVENTS_STATUS_CHANGED_KEY: ${TASKS_EVENTS_STATUS_CHANGED_KEY:-task.status.changed}
      TASKS_EVENTS_REMINDER_KEY: ${TASKS_EVENTS_REMINDER_KEY:-task.reminder}
      TASKS_DELAYED_QUEUE_KEY: ${TASKS_DELAYED_QUEUE_KEY:-tasks:delayed}
      TASKS_REMINDERS_QUEUE_KEY: ${TASKS_REMINDERS_QUEUE_KEY:-tasks:reminders}
      TASKS_REMINDERS_POLL_INTERVAL_MS: ${TASKS_REMINDERS_POLL_INTERVAL_MS:-5000}
      TASKS_WORKER_ENABLED: ${TASKS_WORKER_ENABLED:-false}
      TASKS_WORKER_POLL_INTERVAL_MS: ${TASKS_WORKER_POLL_INTERVAL_MS:-5000}
      TASKS_WORKER_BATCH_SIZE: ${TASKS_WORKER_BATCH_SIZE:-100}
      TASKS_REDIS_URL: ${TASKS_REDIS_URL_INTERNAL:-redis://redis:6379/6}
    ports:
      - "${TASKS_SERVICE_PORT:-8086}:8086"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8086/api/health || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
    networks:
      - infra
    profiles: ["backend"]

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://gateway:8080/api}
        NEXT_PUBLIC_CRM_SSE_URL: ${NEXT_PUBLIC_CRM_SSE_URL:-http://gateway:8080/api/v1/streams/deals}
        NEXT_PUBLIC_NOTIFICATIONS_SSE_URL: ${NEXT_PUBLIC_NOTIFICATIONS_SSE_URL:-http://gateway:8080/api/v1/streams/notifications}
        NEXT_PUBLIC_TELEMETRY_DSN: ${NEXT_PUBLIC_TELEMETRY_DSN:-}
        NEXT_PUBLIC_FEATURE_FLAGS: ${NEXT_PUBLIC_FEATURE_FLAGS:-}
        FRONTEND_PROXY_TIMEOUT: ${FRONTEND_PROXY_TIMEOUT:-15000}
        FRONTEND_SERVER_TIMEOUT_MS: ${FRONTEND_SERVER_TIMEOUT_MS:-7500}
    environment:
      NODE_ENV: production
      START_COMMAND: node dist/src/main.js
      PORT: 3000
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://gateway:8080/api}
      NEXT_PUBLIC_CRM_SSE_URL: ${NEXT_PUBLIC_CRM_SSE_URL:-http://gateway:8080/api/v1/streams/deals}
      NEXT_PUBLIC_NOTIFICATIONS_SSE_URL: ${NEXT_PUBLIC_NOTIFICATIONS_SSE_URL:-http://gateway:8080/api/v1/streams/notifications}
      NEXT_PUBLIC_TELEMETRY_DSN: ${NEXT_PUBLIC_TELEMETRY_DSN:-}
      NEXT_PUBLIC_FEATURE_FLAGS: ${NEXT_PUBLIC_FEATURE_FLAGS:-}
      FRONTEND_PROXY_TIMEOUT: ${FRONTEND_PROXY_TIMEOUT:-15000}
      FRONTEND_SERVER_TIMEOUT_MS: ${FRONTEND_SERVER_TIMEOUT_MS:-7500}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "${FRONTEND_SERVICE_PORT:-3000}:3000"
    networks:
      - infra
    profiles: ["app"]

volumes:
  postgres_data:
  redis_data:
  consul_data:
  pgadmin_data:
  documents_data:

networks:
  infra:
    driver: bridge

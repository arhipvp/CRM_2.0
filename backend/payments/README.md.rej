diff a/backend/payments/README.md b/backend/payments/README.md	(rejected hunks)
@@ -1,31 +1,37 @@
 # Payments Service
 
 ## Назначение
 Payments учитывает финансовые операции (платежи, комиссии, возвраты), публикует события в RabbitMQ и опирается на внутренние справочники тарифов. Все расчёты выполняются в валюте RUB без дополнительных пересчётов или внешних конвертаций.【F:docs/architecture.md†L12-L17】【F:docs/tech-stack.md†L202-L236】
 
 ## Требования к окружению
 - JDK 17 и Gradle 8+ (Spring Boot WebFlux + Spring Cloud Stream).【F:docs/tech-stack.md†L204-L230】
 - PostgreSQL (схема `payments`) и RabbitMQ (exchange `payments.events`).【F:docs/architecture.md†L12-L13】【F:docs/tech-stack.md†L214-L236】
-- Переменные окружения `PAYMENTS_SERVICE_PORT`, `PAYMENTS_DATABASE_URL`, `PAYMENTS_RABBITMQ_URL` и связанные настройки (см. [`env.example`](../../env.example)).
+- Переменные окружения `PAYMENTS_SERVICE_PORT`, `PAYMENTS_JDBC_URL`, `PAYMENTS_R2DBC_URL`, `PAYMENTS_RABBITMQ_URL` и связанные настройки (см. [`env.example`](../../env.example)).
 
 ## Локальный запуск
-> **TODO:** сгенерировать Spring Boot WebFlux сервис через Spring Initializr, добавить зависимости Spring Cloud Stream и Flyway, настроить профили `local`/`dev`, Gradle-скрипты (`bootRun`, тесты с Testcontainers) и конфигурацию RabbitMQ/PostgreSQL.
+
+```bash
+cd backend/payments
+./gradlew bootRun -PspringProfile=local
+```
+
+Сервис ожидает переменные `PAYMENTS_R2DBC_URL`, `PAYMENTS_JDBC_URL`, `PAYMENTS_RABBITMQ_URL` и `PAYMENTS_SERVICE_PORT` из `.env` (см. [env.example](../../env.example)). SSE-поток доступен по адресу `GET http://localhost:${PAYMENTS_SERVICE_PORT}/streams/payments`.
 
 ## Миграции и скрипты
 - Миграции Flyway храните в каталоге [`migrations`](migrations/) и запускайте автоматически при старте приложения или отдельной задачей `./gradlew flywayMigrate`.【F:docs/tech-stack.md†L226-L230】
 - Скрипты настройки очередей (`payments.events`, маршрутизация) оформляются через Spring AMQP конфигурацию.
-- ⚠️ Миграции ещё не созданы и будут добавлены вместе с исходным кодом сервиса.
+Миграции применяются автоматически при старте профиля `local`/`dev`. Для ручного запуска используйте `./gradlew flywayMigrate -PspringProfile=local`.
 
 ## Запуск в Docker
 1. Соберите образ через Spring Boot buildpacks:
    ```bash
    ./gradlew bootBuildImage --imageName=crm-payments:local
    ```
 2. Запустите контейнер:
    ```bash
    docker run --rm -p ${PAYMENTS_SERVICE_PORT:-8083}:8083 --env-file ../../env.example crm-payments:local
    ```
 
 ## Полезные ссылки
 - Архитектурные взаимодействия Payments: [`docs/architecture.md`](../../docs/architecture.md#2-взаимодействия-и-потоки-данных).【F:docs/architecture.md†L61-L66】
 - Технологический стек и интеграции: [`docs/tech-stack.md`](../../docs/tech-stack.md#payments).【F:docs/tech-stack.md†L202-L230】

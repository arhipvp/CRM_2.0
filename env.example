# Базовые переменные окружения для локального запуска.
# ⚠️ GitHub Actions временно отключены, но значения ниже сохраняются,
# чтобы локальные сборки повторяли шаги будущего CI.
CI_CD_DISABLED=true

# --- Общие переменные окружения ---
ENVIRONMENT=local
TIMEZONE=Europe/Moscow

# --- Настройки Docker-инфраструктуры ---
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=crm
AUTH_DB_USER=auth
AUTH_DB_PASSWORD=auth
CRM_DB_USER=crm
CRM_DB_PASSWORD=crm
PAYMENTS_DB_USER=payments
PAYMENTS_DB_PASSWORD=payments
DOCUMENTS_DB_USER=documents
DOCUMENTS_DB_PASSWORD=documents
TASKS_DB_USER=tasks
TASKS_DB_PASSWORD=tasks
NOTIFICATIONS_DB_USER=notifications
NOTIFICATIONS_DB_PASSWORD=notifications
REPORTS_DB_USER=reports
REPORTS_DB_PASSWORD=reports
AUDIT_DB_USER=audit
AUDIT_DB_PASSWORD=audit
BACKUP_DB_USER=backup
BACKUP_DB_PASSWORD=backup

RABBITMQ_HOST=localhost
RABBITMQ_PORT=5672
RABBITMQ_MANAGEMENT_PORT=15672
RABBITMQ_DEFAULT_USER=crm
RABBITMQ_DEFAULT_PASS=crm
RABBITMQ_DEFAULT_VHOST=crm
# Скрипт infra/rabbitmq/bootstrap.sh использует *_RABBITMQ_URL как единый источник
# и пропускает записи без корректных пользователя/vhost, выводя предупреждение.
# правды для пользователей и vhost-ов. При добавлении сервисов обновляйте список
# переменных ниже — скрипт автоматически создаст соответствующие объекты.
# Значения выше соответствуют дефолтному пользователю/vhost `crm`, который создаётся Docker Compose.
# Для сервисов с собственными правами указывайте URL вида `SERVICE_RABBITMQ_URL=amqp://user:pass@host:port/vhost` (см. примеры ниже).

REDIS_HOST=localhost
REDIS_PORT=6379

CONSUL_HTTP_PORT=8500
CONSUL_GRPC_PORT=8502
CONSUL_DNS_PORT=8600

PGADMIN_PORT=5050
PGADMIN_DEFAULT_EMAIL=admin@local
PGADMIN_DEFAULT_PASSWORD=admin

# --- URL подключения приложений ---
# PostgreSQL (единый кластер, отдельные схемы на сервис)
# См. docs/tech-stack.md → «Инфраструктура» → «Базы данных»
# Используйте DATABASE_URL для административных задач (миграции, bootstrap данных)
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
# Auth работает через R2DBC и указывает схему `auth` параметром `schema` (допустим `search_path`)
AUTH_DATABASE_URL=r2dbc:postgresql://${AUTH_DB_USER}:${AUTH_DB_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?schema=auth
CRM_DATABASE_URL=postgresql://${CRM_DB_USER}:${CRM_DB_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?search_path=crm
PAYMENTS_DATABASE_URL=postgresql://${PAYMENTS_DB_USER}:${PAYMENTS_DB_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?search_path=payments
PAYMENTS_JDBC_URL=jdbc:postgresql://${PAYMENTS_DB_USER}:${PAYMENTS_DB_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?currentSchema=payments
PAYMENTS_R2DBC_URL=r2dbc:postgresql://${PAYMENTS_DB_USER}:${PAYMENTS_DB_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?schema=payments
DOCUMENTS_DATABASE_URL=postgresql://${DOCUMENTS_DB_USER}:${DOCUMENTS_DB_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?search_path=documents
DOCUMENTS_DATABASE_SCHEMA=documents                         # Имя схемы PostgreSQL для сервиса документов
DOCUMENTS_RUN_MIGRATIONS=false                               # true — применять миграции TypeORM при старте API/воркера
TASKS_DATABASE_URL=postgresql://${TASKS_DB_USER}:${TASKS_DB_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?search_path=tasks
TASKS_TYPEORM_LOGGING=false
NOTIFICATIONS_DATABASE_URL=postgresql://${NOTIFICATIONS_DB_USER}:${NOTIFICATIONS_DB_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?search_path=notifications
REPORTS_DATABASE_URL=postgresql://${REPORTS_DB_USER}:${REPORTS_DB_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?search_path=reports
REPORTS_SCHEMA=reports
REPORTS_CRM_SCHEMA=crm
REPORTS_AUDIT_SCHEMA=audit
# При необходимости добавьте дополнительные исходные схемы через запятую (например, crm,audit,marketing).
REPORTS_SOURCE_SCHEMAS=crm,audit
AUDIT_DB_SCHEMA=audit
AUDIT_JDBC_URL=jdbc:postgresql://${AUDIT_DB_USER}:${AUDIT_DB_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?currentSchema=${AUDIT_DB_SCHEMA}
AUDIT_R2DBC_URL=r2dbc:postgresql://${AUDIT_DB_USER}:${AUDIT_DB_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?schema=${AUDIT_DB_SCHEMA}
BACKUP_DATABASE_URL=postgresql://${BACKUP_DB_USER}:${BACKUP_DB_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?search_path=backup

# Базовый URL использует пользователя CRM и vhost из `${RABBITMQ_DEFAULT_VHOST}`, поэтому подходит сервисам без собственного vhost.
# Индивидуальные URL ниже требуют, чтобы соответствующие пользователи и vhost-ы были созданы заранее (см. docs/local-setup.md#создайте-пользователей-и-vhost-ы-rabbitmq-для-сервисов).
RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@${RABBITMQ_HOST}:${RABBITMQ_PORT}/${RABBITMQ_DEFAULT_VHOST}
CRM_RABBITMQ_URL=${RABBITMQ_URL}                            # CRM публикует события во vhost `crm`; переопределите при другом пользователе
RABBITMQ_MANAGEMENT_URL=http://${RABBITMQ_HOST}:${RABBITMQ_MANAGEMENT_PORT}

# Redis (сессии, кеши, фоновые очереди)
# См. docs/tech-stack.md → «Инфраструктура» → «Брокеры сообщений и кэши»
REDIS_URL=redis://${REDIS_HOST}:${REDIS_PORT}/0
REDIS_CACHE_URL=redis://${REDIS_HOST}:${REDIS_PORT}/1
REDIS_CELERY_URL=redis://${REDIS_HOST}:${REDIS_PORT}/2
REDIS_BULLMQ_URL=redis://${REDIS_HOST}:${REDIS_PORT}/3
REDIS_RATE_LIMIT_URL=redis://${REDIS_HOST}:${REDIS_PORT}/4
REDIS_KEY_PREFIX=gateway
REDIS_CACHE_TTL=300
REDIS_HEARTBEAT_PREFIX=gateway:sse

# Consul (service discovery и конфигурация)
# См. docs/tech-stack.md → «Инфраструктура» → «Service discovery»
CONSUL_HTTP_ADDR=http://localhost:${CONSUL_HTTP_PORT}
CONSUL_GRPC_ADDR=127.0.0.1:${CONSUL_GRPC_PORT}
CONSUL_DNS_ADDR=127.0.0.1:${CONSUL_DNS_PORT}
CONSUL_ENABLED=true
CONSUL_HTTP_TIMEOUT=5000

# --- Безопасность и аутентификация ---
JWT_ACCESS_SECRET=change_me_access_secret
JWT_REFRESH_SECRET=change_me_refresh_secret
JWT_ISSUER=crm.local
JWT_AUDIENCE=crm.clients
SESSION_SECRET=change_me_session_secret

# --- Почтовые уведомления ---
# В локальной среде сервис отправки e-mail не используется.

# --- Frontend (Next.js) ---
# Совпадает с `GATEWAY_BASE_URL` и использует `${GATEWAY_SERVICE_PORT}`,
# поэтому смена порта Gateway автоматически подтянется на фронтенд.
# Укажите значение `mock`, чтобы отключить реальные запросы и использовать встроенные мок-данные фронтенда.
# Для локального запуска вне Docker переопределите URL на `http://localhost:${GATEWAY_SERVICE_PORT}/api`
LOCAL_LAUNCH_OPEN_BROWSER=false                             # Автоматически открывать браузер после scripts/dev-up.sh
NEXT_PUBLIC_API_BASE_URL=http://gateway:8080/api
NEXT_PUBLIC_TELEMETRY_DSN=
NEXT_PUBLIC_FEATURE_FLAGS=deals-calendar,notifications,deal-sidebar-widgets
# Таймаут (в миллисекундах) для проксирования Next.js и клиентских fetch-запросов API.
# Значение применяется и на сервере, и в браузере; оставьте 15000 для 15-секундного лимита.
FRONTEND_PROXY_TIMEOUT=15000
# Значение по умолчанию рассчитано на запуск фронтенда в Docker-сети infra и обращение к gateway по сервисному имени.
# При сетевой ошибке фронтенд автоматически отключает соответствующий поток до перезагрузки вкладки,
# чтобы не держать «битые» подключения. Обновите страницу после восстановления инфраструктуры,
# чтобы активировать поток повторно.
NEXT_PUBLIC_CRM_SSE_URL=http://gateway:8080/api/v1/streams/deals     # Публичный SSE-канал сделок (маршрут Gateway). Оставьте пустым, чтобы временно отключить поток.
NEXT_PUBLIC_PAYMENTS_SSE_URL=http://gateway:8080/api/v1/streams/payments # Поток платежей → обновление таблицы и тостов. Очистите значение при недоступности канала.
NEXT_PUBLIC_NOTIFICATIONS_SSE_URL=http://gateway:8080/api/v1/streams/notifications # Очистите переменную, если уведомления должны работать только локально.
# При запуске фронтенда на хостовой машине переопределите значения в `.env.local` или используйте пример ниже:
# NEXT_PUBLIC_CRM_SSE_URL=http://localhost:${GATEWAY_SERVICE_PORT}/api/v1/streams/deals
# NEXT_PUBLIC_PAYMENTS_SSE_URL=http://localhost:${GATEWAY_SERVICE_PORT}/api/v1/streams/payments
# NEXT_PUBLIC_NOTIFICATIONS_SSE_URL=http://localhost:${GATEWAY_SERVICE_PORT}/api/v1/streams/notifications

# Порты и базовые URL сервисов (локальный запуск)
# Ссылки на логику переменных указаны в README соответствующих сервисов и в docs/local-setup.md
FRONTEND_SERVICE_PORT=3000                                 # Порт Next.js; скрипты `pnpm dev`/`pnpm start` пробрасывают его в `PORT`
GATEWAY_SERVICE_PORT=8080                                  # См. backend/gateway/README.md
GATEWAY_SERVICE_HOST=0.0.0.0                               # Хост прослушивания Gateway (локально оставьте 0.0.0.0)
GATEWAY_BASE_URL=http://localhost:${GATEWAY_SERVICE_PORT}/api
GATEWAY_UPSTREAM_TIMEOUT=5000
GATEWAY_UPSTREAM_SSE_RECONNECT_DELAY=3000
GATEWAY_UPSTREAM_SSE_HEARTBEAT_INTERVAL=15000
GATEWAY_UPSTREAM_SSE_HEARTBEAT_TTL=60
AUTH_SERVICE_PORT=8081                                     # См. backend/auth/README.md
AUTH_BASE_URL=http://localhost:${AUTH_SERVICE_PORT}
AUTH_REDIS_URL=redis://${REDIS_HOST}:${REDIS_PORT}/5
AUTH_JWT_ISSUER=http://localhost:${AUTH_SERVICE_PORT}
AUTH_JWT_SECRET=change_me                                   # Замените на случайное значение для локальной разработки
AUTH_JWT_AUDIENCE=crm-clients
AUTH_ACCESS_TOKEN_TTL=PT15M                                 # ISO-8601 длительность (15 минут)
AUTH_REFRESH_TOKEN_TTL=PT7D                                 # ISO-8601 длительность (7 дней)
CRM_SERVICE_HOST=0.0.0.0                                   # Хост, на котором FastAPI слушает (переопределите при необходимости)
CRM_SERVICE_PORT=8082                                      # См. backend/crm/README.md
CRM_BASE_URL=http://localhost:${CRM_SERVICE_PORT}
CRM_REDIS_URL=redis://${REDIS_HOST}:${REDIS_PORT}/2
CRM_EVENTS_EXCHANGE=crm.events
CRM_PAYMENTS_EXCHANGE=payments.events
CRM_PAYMENTS_QUEUE=crm.payments-sync
CRM_PAYMENTS_RETRY_EXCHANGE=crm.payments-sync.retry
CRM_PAYMENTS_RETRY_QUEUE=crm.payments-sync.retry
CRM_PAYMENTS_DLX_EXCHANGE=crm.payments-sync.dlx
CRM_PAYMENTS_DLX_QUEUE=crm.payments-sync.dlx
# Подписчик CRM при публикации в DLX добавляет заголовок dead-letter-reason для диагностики ошибок.
CRM_PAYMENTS_RETRY_DELAY_MS=60000
CRM_PAYMENTS_RETRY_LIMIT=5                                 # Ошибки синхронизации до исчерпания лимита должны приводить к requeue, без публикации в DLX
CRM_ENABLE_PAYMENTS_CONSUMER=true
CRM_DEFAULT_TENANT_ID=                                     # Укажите UUID, чтобы использовать тенанта по умолчанию, или оставьте пустым для обязательного заголовка X-Tenant-ID
CRM_CELERY_BROKER_URL=${REDIS_CELERY_URL}
CRM_CELERY_RESULT_BACKEND=${REDIS_CELERY_URL}
# BullMQ очередь синхронизации прав документов
CRM_PERMISSIONS_QUEUE_NAME=permissions:sync
CRM_PERMISSIONS_QUEUE_PREFIX=bull
CRM_PERMISSIONS_JOB_NAME=permissions.sync
CRM_PERMISSIONS_REDIS_URL=${CRM_REDIS_URL}
PAYMENTS_SERVICE_PORT=8083                                 # См. backend/payments/README.md
PAYMENTS_BASE_URL=http://localhost:${PAYMENTS_SERVICE_PORT}
PAYMENTS_RABBITMQ_URL=amqp://payments:payments@${RABBITMQ_HOST}:${RABBITMQ_PORT}/payments # Требует предварительного создания пользователя и vhost
PAYMENTS_CRM_WEBHOOK_SECRET=                              # Секрет для проверки подписи вебхуков CRM → Payments
PAYMENTS_EXPORTS_QUEUE=payments.exports                   # Очередь заданий на экспорт платежей
PAYMENTS_EXPORTS_STATUS_QUEUE=payments.exports.status     # Очередь статусов выгрузок (worker → Payments)
PAYMENTS_EXPORTS_STORAGE_BUCKET=payments-exports          # Бакет/контейнер для выгрузок (используется worker-ом)
PAYMENTS_EXPORTS_STORAGE_PREFIX=payments/exports          # Префикс/папка внутри хранилища
PAYMENTS_EXPORTS_STORAGE_BASE_URL=http://storage.local/exports # Базовый URL для формирования ссылок на скачивание
PAYMENTS_EXPORTS_STORAGE_URL_TTL=PT24H                    # Срок жизни сгенерированных ссылок (ISO-8601 длительность)
DOCUMENTS_SERVICE_PORT=8084                                # См. backend/documents/README.md
DOCUMENTS_BASE_URL=http://localhost:${DOCUMENTS_SERVICE_PORT}
DOCUMENTS_REDIS_URL=redis://${REDIS_HOST}:${REDIS_PORT}/3
DOCUMENTS_REDIS_PREFIX=documents                              # Префикс ключей BullMQ в Redis
DOCUMENTS_PERMISSIONS_SYNC_QUEUE_NAME=documents.permissions.sync # Очередь BullMQ синхронизации прав папок
DOCUMENTS_PERMISSIONS_SYNC_JOB_TTL=300                        # TTL задания синхронизации прав (секунды)
DOCUMENTS_QUEUE_NAME=documents:tasks                           # Имя очереди BullMQ (job names: documents.upload/documents.sync)
DOCUMENTS_UPLOAD_URL_BASE=http://localhost:9000/documents/upload  # Базовый URL для подписанных ссылок загрузки
DOCUMENTS_UPLOAD_URL_TTL=900                                   # TTL подписанной ссылки (секунды)
DOCUMENTS_FOLDERS_TEMPLATE_DEFAULT="{title}"                     # Общий шаблон имени папки (плейсхолдеры: {title}, {ownerId}, {ownerType})
DOCUMENTS_FOLDERS_TEMPLATE_CLIENT="Client {ownerId}"             # Шаблон названия папки клиента
DOCUMENTS_FOLDERS_TEMPLATE_DEAL="Deal {ownerId}"                 # Шаблон названия папки сделки
DOCUMENTS_FOLDERS_TEMPLATE_POLICY="Policy {ownerId}"             # Шаблон названия папки полиса
DOCUMENTS_FOLDERS_TEMPLATE_PAYMENT="Payment {ownerId}"           # Шаблон названия папки платежа
DOCUMENTS_FOLDERS_WEB_BASE_URL=https://drive.google.com/drive/folders/ # Базовый URL для построения web-ссылок на папки
NOTIFICATIONS_SERVICE_PORT=8085                            # См. backend/notifications/README.md
NOTIFICATIONS_BASE_URL=http://localhost:${NOTIFICATIONS_SERVICE_PORT}/api
NOTIFICATIONS_RABBITMQ_URL=amqp://notifications:notifications@${RABBITMQ_HOST}:${RABBITMQ_PORT}/notifications # Требует предварительного создания пользователя и vhost
NOTIFICATIONS_REDIS_URL=redis://${REDIS_HOST}:${REDIS_PORT}/4
NOTIFICATIONS_HTTP_HOST=0.0.0.0
NOTIFICATIONS_HTTP_PORT=${NOTIFICATIONS_SERVICE_PORT}
NOTIFICATIONS_DB_HOST=${POSTGRES_HOST}
NOTIFICATIONS_DB_PORT=${POSTGRES_PORT}
NOTIFICATIONS_DB_NAME=${POSTGRES_DB}
NOTIFICATIONS_DB_SSL=false
NOTIFICATIONS_RABBITMQ_URI=amqp://notifications:notifications@${RABBITMQ_HOST}:${RABBITMQ_PORT}/notifications
NOTIFICATIONS_RABBITMQ_EXCHANGE=notifications.exchange
NOTIFICATIONS_RABBITMQ_QUEUE=notifications.events
NOTIFICATIONS_RABBITMQ_ROUTING_KEY=notifications.*
NOTIFICATIONS_RABBITMQ_QUEUE_DURABLE=true
NOTIFICATIONS_DISPATCH_EXCHANGE=notifications.exchange
NOTIFICATIONS_DISPATCH_ROUTING_KEY=notifications.dispatch
NOTIFICATIONS_DISPATCH_REDIS_CHANNEL=notifications:dispatch
NOTIFICATIONS_DISPATCH_RETRY_ATTEMPTS=3                      # Общее число повторов (RabbitMQ, Redis, внутренний обработчик)
NOTIFICATIONS_DISPATCH_RETRY_DELAY_MS=60000                  # Пауза между попытками в миллисекундах
NOTIFICATIONS_REDIS_HOST=${REDIS_HOST}
NOTIFICATIONS_REDIS_PORT=${REDIS_PORT}
NOTIFICATIONS_REDIS_USERNAME=
NOTIFICATIONS_REDIS_PASSWORD=
NOTIFICATIONS_REDIS_DB=4
NOTIFICATIONS_REDIS_PREFIX=notifications:
NOTIFICATIONS_TELEGRAM_ENABLED=false
NOTIFICATIONS_TELEGRAM_MOCK=true
NOTIFICATIONS_TELEGRAM_BOT_TOKEN=
NOTIFICATIONS_TELEGRAM_CHAT_ID=
NOTIFICATIONS_TELEGRAM_WEBHOOK_ENABLED=false
NOTIFICATIONS_TELEGRAM_WEBHOOK_SECRET=
NOTIFICATIONS_TELEGRAM_WEBHOOK_SIGNATURE_HEADER=x-telegram-signature
NOTIFICATIONS_SSE_RETRY_MS=5000
NOTIFICATIONS_TEMPLATES_DEFAULT_LOCALE=ru-RU             # Базовая локаль для шаблонов при отсутствии значения в запросе
TASKS_SERVICE_PORT=8086                                    # См. backend/tasks/README.md
TASKS_SERVICE_HOST=0.0.0.0                                   # Хост прослушивания API Tasks
TASKS_BASE_URL=http://localhost:${TASKS_SERVICE_PORT}
TASKS_EVENTS_QUEUE=tasks.events                              # Очередь RabbitMQ для публикации событий задач
TASKS_EVENTS_EXCHANGE=tasks.events                           # Exchange, в который Tasks публикует события
TASKS_EVENTS_ROUTING_KEY=tasks.event                         # Routing key событий задач
TASKS_DELAYED_QUEUE_KEY=tasks:delayed                        # Ключ Sorted Set в Redis для отложенных задач
TASKS_REMINDERS_QUEUE_KEY=tasks:reminders                    # Ключ Sorted Set в Redis для напоминаний по задачам
TASKS_REMINDERS_POLL_INTERVAL_MS=5000                        # Интервал опроса Sorted Set напоминаний воркером TaskReminderProcessor (мс)
TASKS_WORKER_ENABLED=false                                   # Включайте true для воркеров
TASKS_WORKER_POLL_INTERVAL_MS=5000                           # Интервал опроса Redis (мс)
TASKS_WORKER_BATCH_SIZE=100                                  # Сколько задач активировать за один проход воркера
TASKS_RABBITMQ_URL=amqp://tasks:tasks@${RABBITMQ_HOST}:${RABBITMQ_PORT}/tasks # Требует предварительного создания пользователя и vhost
TASKS_REDIS_URL=redis://${REDIS_HOST}:${REDIS_PORT}/6
# FastAPI-сервис Reports (poetry run reports-api)
REPORTS_SERVICE_PORT=8087                                  # См. backend/reports/README.md
REPORTS_BASE_URL=http://localhost:${REPORTS_SERVICE_PORT}
REPORTS_SERVICE_HOST=0.0.0.0
AUDIT_SERVICE_PORT=8088                                    # См. backend/audit/README.md
AUDIT_BASE_URL=http://localhost:${AUDIT_SERVICE_PORT}
AUDIT_RABBITMQ_HOST=${RABBITMQ_HOST}
AUDIT_RABBITMQ_PORT=${RABBITMQ_PORT}
AUDIT_RABBITMQ_USER=audit
AUDIT_RABBITMQ_PASSWORD=audit
AUDIT_RABBITMQ_VHOST=audit
AUDIT_RABBITMQ_URL=amqp://${AUDIT_RABBITMQ_USER}:${AUDIT_RABBITMQ_PASSWORD}@${AUDIT_RABBITMQ_HOST}:${AUDIT_RABBITMQ_PORT}/${AUDIT_RABBITMQ_VHOST} # Совместимость со скриптами на bash
AUDIT_EVENTS_QUEUE=audit.events                          # Очередь входящих аудиторских событий
AUDIT_EVENTS_GROUP=audit-service                        # Консьюмерская группа Spring Cloud Stream
AUDIT_DLQ_NAME=audit.dlq

# Настройки upstream Gateway (используют объявленные выше порты сервисов)
GATEWAY_UPSTREAM_CRM_BASE_URL=http://localhost:${CRM_SERVICE_PORT}/api
GATEWAY_UPSTREAM_CRM_SERVICE_NAME=crm-service
GATEWAY_UPSTREAM_CRM_SSE_URL=http://localhost:${CRM_SERVICE_PORT}/streams # Внутренний upstream CRM для канала deals
GATEWAY_UPSTREAM_PAYMENTS_BASE_URL=http://localhost:${PAYMENTS_SERVICE_PORT}/api
GATEWAY_UPSTREAM_PAYMENTS_SSE_URL=http://localhost:${PAYMENTS_SERVICE_PORT}/streams # Upstream SSE Payments → канал payments
GATEWAY_UPSTREAM_PAYMENTS_SERVICE_NAME=payments-service
GATEWAY_UPSTREAM_AUTH_BASE_URL=http://localhost:${AUTH_SERVICE_PORT}/api
GATEWAY_UPSTREAM_AUTH_SERVICE_NAME=auth-service
GATEWAY_UPSTREAM_NOTIFICATIONS_BASE_URL=http://localhost:${NOTIFICATIONS_SERVICE_PORT}/api
GATEWAY_UPSTREAM_NOTIFICATIONS_SERVICE_NAME=notifications-service
GATEWAY_UPSTREAM_NOTIFICATIONS_SSE_URL=http://localhost:${NOTIFICATIONS_SERVICE_PORT}/streams
# Общие настройки CI/CD (используйте локально, пока GitHub Actions отключены)
# --- Общие настройки CI/CD ---
CI_REGISTRY_IMAGE=ghcr.io/your-org/crm
SENTRY_AUTH_TOKEN=

# Внешние интеграции и сервисные ключи
# См. docs/local-setup.md → «Интеграции» за шагами получения доступов
GOOGLE_DRIVE_SERVICE_ACCOUNT_JSON=               # JSON ключ сервисного аккаунта Google Workspace (обязателен: stage/prod; dev — только при доступе к боевому Drive)
GOOGLE_DRIVE_SERVICE_ACCOUNT_PATH=                # Альтернатива: путь до файла сервисного аккаунта (если не используете JSON в переменной)
GOOGLE_APPLICATION_CREDENTIALS=                   # Стандартная переменная SDK Google: путь до JSON (переопределяет значение по умолчанию)
GOOGLE_DRIVE_SHARED_DRIVE_ID=                    # ID общего диска/корневой папки для документов (обязателен: stage/prod; dev — не нужен с эмулятором)
TELEGRAM_BOT_TOKEN=                              # Токен Telegram Bot API (обязателен: stage/prod; dev — можно dev-mock-token при включённой заглушке)
TELEGRAM_WEBHOOK_URL=                            # Публичный URL, куда Telegram шлёт обновления (обязателен: stage/prod; dev — оставьте пустым при mock)
TELEGRAM_WEBHOOK_SECRET=                         # Секрет подписи для проверки вебхука (если используется; обязателен: prod при включении проверки)

# Локальные эмуляторы/заглушки интеграций
# См. docs/local-setup.md → «Интеграции»
GOOGLE_DRIVE_EMULATOR_URL=http://localhost:9000            # Укажите URL MinIO/localstack (по умолчанию: dev); оставьте пустым для stage/prod
GOOGLE_DRIVE_EMULATOR_ROOT=./var/local-drive               # Папка/идентификатор верхнего уровня для эмулятора (dev); для боевого Drive очистите переменную
TELEGRAM_MOCK_ENABLED=true                                 # true — пересылаем запросы в mock (только dev); для stage/prod установите false или удалите переменную
TELEGRAM_MOCK_SERVER_URL=http://localhost:8085/telegram    # Эндпоинт локальной заглушки (dev). Для stage/prod оставьте пустым
